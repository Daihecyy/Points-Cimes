// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { PatchReportsReportIdStatusData, PatchReportsReportIdStatusResponses, PatchReportsReportIdStatusErrors, DeleteReportsReportIdData, DeleteReportsReportIdResponses, DeleteReportsReportIdErrors, GetReportsReportIdData, GetReportsReportIdResponses, GetReportsReportIdErrors, PatchReportsReportIdData, PatchReportsReportIdResponses, PatchReportsReportIdErrors, GetReportsData, GetReportsResponses, GetReportsErrors, PostReportsData, PostReportsResponses, PostReportsErrors, PostLoginAccessTokenData, PostLoginAccessTokenResponses, PostLoginAccessTokenErrors, PostLoginTestTokenData, PostLoginTestTokenResponses, PostLoginTestTokenErrors, PostPasswordRecoveryEmailData, PostPasswordRecoveryEmailResponses, PostPasswordRecoveryEmailErrors, PostVerifyEmailData, PostVerifyEmailResponses, PostVerifyEmailErrors, PostResetPasswordData, PostResetPasswordResponses, PostResetPasswordErrors, PostPasswordRecoveryHtmlContentEmailData, PostPasswordRecoveryHtmlContentEmailResponses, PostPasswordRecoveryHtmlContentEmailErrors, GetUsersData, GetUsersResponses, GetUsersErrors, PostUsersData, PostUsersResponses, PostUsersErrors, DeleteUsersMeData, DeleteUsersMeResponses, GetUsersMeData, GetUsersMeResponses, PatchUsersMeData, PatchUsersMeResponses, PatchUsersMeErrors, PostUsersMeMakeAdminData, PostUsersMeMakeAdminResponses, PatchUsersMePasswordData, PatchUsersMePasswordResponses, PatchUsersMePasswordErrors, PostUsersSignupData, PostUsersSignupResponses, PostUsersSignupErrors, DeleteUsersUserIdData, DeleteUsersUserIdResponses, DeleteUsersUserIdErrors, GetUsersUserIdData, GetUsersUserIdResponses, GetUsersUserIdErrors, PatchUsersUserIdData, PatchUsersUserIdResponses, PatchUsersUserIdErrors, RootGetData, RootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Reports {
    /**
     * Change Report Status
     */
    public static patchReportsReportIdStatus<ThrowOnError extends boolean = false>(options: Options<PatchReportsReportIdStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<PatchReportsReportIdStatusResponses, PatchReportsReportIdStatusErrors, ThrowOnError>({
            url: '/reports/{report_id}/status',
            ...options
        });
    }
    
    /**
     * Delete Report
     */
    public static deleteReportsReportId<ThrowOnError extends boolean = false>(options: Options<DeleteReportsReportIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteReportsReportIdResponses, DeleteReportsReportIdErrors, ThrowOnError>({
            url: '/reports/{report_id}',
            ...options
        });
    }
    
    /**
     * Get Report By Id
     */
    public static getReportsReportId<ThrowOnError extends boolean = false>(options: Options<GetReportsReportIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetReportsReportIdResponses, GetReportsReportIdErrors, ThrowOnError>({
            url: '/reports/{report_id}',
            ...options
        });
    }
    
    /**
     * Edit Report
     */
    public static patchReportsReportId<ThrowOnError extends boolean = false>(options: Options<PatchReportsReportIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<PatchReportsReportIdResponses, PatchReportsReportIdErrors, ThrowOnError>({
            url: '/reports/{report_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Get Reports In Location
     */
    public static getReports<ThrowOnError extends boolean = false>(options: Options<GetReportsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetReportsResponses, GetReportsErrors, ThrowOnError>({
            url: '/reports/',
            ...options
        });
    }
    
    /**
     * Create Report
     */
    public static postReports<ThrowOnError extends boolean = false>(options: Options<PostReportsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostReportsResponses, PostReportsErrors, ThrowOnError>({
            url: '/reports/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Login {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static postLoginAccessToken<ThrowOnError extends boolean = false>(options: Options<PostLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostLoginAccessTokenResponses, PostLoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     */
    public static postLoginTestToken<ThrowOnError extends boolean = false>(options: Options<PostLoginTestTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostLoginTestTokenResponses, PostLoginTestTokenErrors, ThrowOnError>({
            url: '/login/test-token',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     */
    public static postPasswordRecoveryEmail<ThrowOnError extends boolean = false>(options: Options<PostPasswordRecoveryEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostPasswordRecoveryEmailResponses, PostPasswordRecoveryEmailErrors, ThrowOnError>({
            url: '/password-recovery/{email}',
            ...options
        });
    }
    
    /**
     * Verify Email
     * Verify the email adress exists
     */
    public static postVerifyEmail<ThrowOnError extends boolean = false>(options: Options<PostVerifyEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostVerifyEmailResponses, PostVerifyEmailErrors, ThrowOnError>({
            url: '/verify-email/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     */
    public static postResetPassword<ThrowOnError extends boolean = false>(options: Options<PostResetPasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostResetPasswordResponses, PostResetPasswordErrors, ThrowOnError>({
            url: '/reset-password/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     */
    public static postPasswordRecoveryHtmlContentEmail<ThrowOnError extends boolean = false>(options: Options<PostPasswordRecoveryHtmlContentEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostPasswordRecoveryHtmlContentEmailResponses, PostPasswordRecoveryHtmlContentEmailErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/password-recovery-html-content/{email}',
            ...options
        });
    }
}

export class Users {
    /**
     * Read Users
     * Retrieve users.
     */
    public static getUsers<ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/',
            ...options
        });
    }
    
    /**
     * Create User
     * Create new user.
     */
    public static postUsers<ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     */
    public static deleteUsersMe<ThrowOnError extends boolean = false>(options?: Options<DeleteUsersMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteUsersMeResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     */
    public static getUsersMe<ThrowOnError extends boolean = false>(options?: Options<GetUsersMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUsersMeResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     */
    public static patchUsersMe<ThrowOnError extends boolean = false>(options: Options<PatchUsersMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<PatchUsersMeResponses, PatchUsersMeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Make Admin
     * This endpoint is only usable if the database contains exactly one user.
     * It will add this user to the `admin` group.
     */
    public static postUsersMeMakeAdmin<ThrowOnError extends boolean = false>(options?: Options<PostUsersMeMakeAdminData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUsersMeMakeAdminResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me/make-admin',
            ...options
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     */
    public static patchUsersMePassword<ThrowOnError extends boolean = false>(options: Options<PatchUsersMePasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<PatchUsersMePasswordResponses, PatchUsersMePasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     */
    public static postUsersSignup<ThrowOnError extends boolean = false>(options: Options<PostUsersSignupData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUsersSignupResponses, PostUsersSignupErrors, ThrowOnError>({
            url: '/users/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     */
    public static deleteUsersUserId<ThrowOnError extends boolean = false>(options: Options<DeleteUsersUserIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUsersUserIdResponses, DeleteUsersUserIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user base by id.
     */
    public static getUsersUserId<ThrowOnError extends boolean = false>(options: Options<GetUsersUserIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUsersUserIdResponses, GetUsersUserIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     * Update a user.
     */
    public static patchUsersUserId<ThrowOnError extends boolean = false>(options: Options<PatchUsersUserIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<PatchUsersUserIdResponses, PatchUsersUserIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Default {
    /**
     * Root
     */
    public static rootGet<ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
            url: '/',
            ...options
        });
    }
}