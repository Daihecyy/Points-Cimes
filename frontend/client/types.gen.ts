// This file is auto-generated by @hey-api/openapi-ts

/**
 * AccountActivation
 */
export type AccountActivation = {
    /**
     * Email
     */
    email: string;
    /**
     * Token
     */
    token: string;
};

/**
 * AccountType
 */
export type AccountType = 'user' | 'moderator' | 'admin';

/**
 * Body_login_access_token_login_access_token_post
 */
export type BodyLoginAccessTokenLoginAccessTokenPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * NewPassword
 */
export type NewPassword = {
    /**
     * Token
     */
    token: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * PasswordUpdate
 */
export type PasswordUpdate = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * Report
 */
export type Report = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    report_type: ReportType;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Description
     */
    description: string;
    /**
     * Creation Time
     */
    creation_time: string;
};

/**
 * ReportCreation
 */
export type ReportCreation = {
    /**
     * Title
     */
    title: string;
    report_type: ReportType;
    /**
     * Location
     */
    location: string;
    /**
     * Description
     */
    description: string;
};

/**
 * ReportEdit
 */
export type ReportEdit = {
    /**
     * Title
     */
    title: string | null;
    report_type: ReportType | null;
    /**
     * Location
     */
    location: {
        [key: string]: unknown;
    } | null;
    /**
     * Description
     */
    description: string | null;
    /**
     * Last Updated Time
     */
    last_updated_time: string;
};

/**
 * ReportStatus
 */
export type ReportStatus = 'pending_review' | 'active' | 'resolved' | 'archived' | 'rejected';

/**
 * ReportType
 */
export type ReportType = 'highlight' | 'danger' | 'problem';

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * User
 */
export type UserInput = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password Hash
     */
    password_hash: string;
    /**
     * Is Active
     */
    is_active: boolean;
    account_type: AccountType;
    /**
     * Name
     */
    name: string;
    /**
     * Created On
     */
    created_on: string | null;
};

/**
 * User
 * Schema for user's model similar to user table in database
 */
export type UserOutput = {
    /**
     * Name
     */
    name: string;
    /**
     * Id
     */
    id: string;
    account_type: AccountType;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Email
     */
    email: string;
    /**
     * Created On
     */
    created_on?: string | null;
};

/**
 * UserCreateAdmin
 */
export type UserCreateAdmin = {
    /**
     * Email
     */
    email: string;
    account_type: AccountType;
    /**
     * Name
     */
    name: string;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Password
     */
    password: string;
};

/**
 * UserCreateRequest
 * The schema is used to send an account creation request.
 */
export type UserCreateRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Name
     */
    name: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserUpdate
 * Schema for user update
 */
export type UserUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UserUpdateAdmin
 */
export type UserUpdateAdmin = {
    /**
     * Email
     */
    email?: string | null;
    account_type?: AccountType | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type PatchReportsReportIdStatusData = {
    body?: never;
    path: {
        /**
         * Report Id
         */
        report_id: string;
    };
    query: {
        new_status: ReportStatus;
    };
    url: '/reports/{report_id}/status';
};

export type PatchReportsReportIdStatusErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchReportsReportIdStatusError = PatchReportsReportIdStatusErrors[keyof PatchReportsReportIdStatusErrors];

export type PatchReportsReportIdStatusResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type PatchReportsReportIdStatusResponse = PatchReportsReportIdStatusResponses[keyof PatchReportsReportIdStatusResponses];

export type DeleteReportsReportIdData = {
    body?: never;
    path: {
        /**
         * Report Id
         */
        report_id: string;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type DeleteReportsReportIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteReportsReportIdError = DeleteReportsReportIdErrors[keyof DeleteReportsReportIdErrors];

export type DeleteReportsReportIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteReportsReportIdResponse = DeleteReportsReportIdResponses[keyof DeleteReportsReportIdResponses];

export type GetReportsReportIdData = {
    body?: never;
    path: {
        /**
         * Report Id
         */
        report_id: string;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type GetReportsReportIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReportsReportIdError = GetReportsReportIdErrors[keyof GetReportsReportIdErrors];

export type GetReportsReportIdResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type GetReportsReportIdResponse = GetReportsReportIdResponses[keyof GetReportsReportIdResponses];

export type PatchReportsReportIdData = {
    body: ReportEdit;
    path: {
        /**
         * Report Id
         */
        report_id: string;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type PatchReportsReportIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchReportsReportIdError = PatchReportsReportIdErrors[keyof PatchReportsReportIdErrors];

export type PatchReportsReportIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type PatchReportsReportIdResponse = PatchReportsReportIdResponses[keyof PatchReportsReportIdResponses];

export type GetReportsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Location Text
         */
        location_text: string;
    };
    url: '/reports/';
};

export type GetReportsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReportsError = GetReportsErrors[keyof GetReportsErrors];

export type GetReportsResponses = {
    /**
     * Response Get Reports In Location Reports  Get
     * Successful Response
     */
    200: Array<Report>;
};

export type GetReportsResponse = GetReportsResponses[keyof GetReportsResponses];

export type PostReportsData = {
    body: ReportCreation;
    path?: never;
    query?: never;
    url: '/reports/';
};

export type PostReportsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostReportsError = PostReportsErrors[keyof PostReportsErrors];

export type PostReportsResponses = {
    /**
     * Successful Response
     */
    200: Report;
};

export type PostReportsResponse = PostReportsResponses[keyof PostReportsResponses];

export type PostLoginAccessTokenData = {
    body: BodyLoginAccessTokenLoginAccessTokenPost;
    path?: never;
    query?: never;
    url: '/login/access-token';
};

export type PostLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostLoginAccessTokenError = PostLoginAccessTokenErrors[keyof PostLoginAccessTokenErrors];

export type PostLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type PostLoginAccessTokenResponse = PostLoginAccessTokenResponses[keyof PostLoginAccessTokenResponses];

export type PostLoginTestTokenData = {
    body: UserInput;
    path?: never;
    query?: never;
    url: '/login/test-token';
};

export type PostLoginTestTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostLoginTestTokenError = PostLoginTestTokenErrors[keyof PostLoginTestTokenErrors];

export type PostLoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type PostLoginTestTokenResponse = PostLoginTestTokenResponses[keyof PostLoginTestTokenResponses];

export type PostPasswordRecoveryEmailData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/password-recovery/{email}';
};

export type PostPasswordRecoveryEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostPasswordRecoveryEmailError = PostPasswordRecoveryEmailErrors[keyof PostPasswordRecoveryEmailErrors];

export type PostPasswordRecoveryEmailResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PostPasswordRecoveryEmailResponse = PostPasswordRecoveryEmailResponses[keyof PostPasswordRecoveryEmailResponses];

export type PostVerifyEmailData = {
    body: AccountActivation;
    path?: never;
    query?: never;
    url: '/verify-email/';
};

export type PostVerifyEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostVerifyEmailError = PostVerifyEmailErrors[keyof PostVerifyEmailErrors];

export type PostVerifyEmailResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PostVerifyEmailResponse = PostVerifyEmailResponses[keyof PostVerifyEmailResponses];

export type PostResetPasswordData = {
    body: NewPassword;
    path?: never;
    query?: never;
    url: '/reset-password/';
};

export type PostResetPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostResetPasswordError = PostResetPasswordErrors[keyof PostResetPasswordErrors];

export type PostResetPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PostResetPasswordResponse = PostResetPasswordResponses[keyof PostResetPasswordResponses];

export type PostPasswordRecoveryHtmlContentEmailData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/password-recovery-html-content/{email}';
};

export type PostPasswordRecoveryHtmlContentEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostPasswordRecoveryHtmlContentEmailError = PostPasswordRecoveryHtmlContentEmailErrors[keyof PostPasswordRecoveryHtmlContentEmailErrors];

export type PostPasswordRecoveryHtmlContentEmailResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type PostPasswordRecoveryHtmlContentEmailResponse = PostPasswordRecoveryHtmlContentEmailResponses[keyof PostPasswordRecoveryHtmlContentEmailResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/users/';
};

export type GetUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * Response Read Users Users  Get
     * Successful Response
     */
    200: Array<UserOutput>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    body: UserCreateAdmin;
    path?: never;
    query?: never;
    url: '/users/';
};

export type PostUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostUsersError = PostUsersErrors[keyof PostUsersErrors];

export type PostUsersResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type DeleteUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type DeleteUsersMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteUsersMeResponse = DeleteUsersMeResponses[keyof DeleteUsersMeResponses];

export type GetUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUsersMeResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses];

export type PatchUsersMeData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type PatchUsersMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUsersMeError = PatchUsersMeErrors[keyof PatchUsersMeErrors];

export type PatchUsersMeResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type PatchUsersMeResponse = PatchUsersMeResponses[keyof PatchUsersMeResponses];

export type PostUsersMeMakeAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/make-admin';
};

export type PostUsersMeMakeAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PatchUsersMePasswordData = {
    body: PasswordUpdate;
    path?: never;
    query?: never;
    url: '/users/me/password';
};

export type PatchUsersMePasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUsersMePasswordError = PatchUsersMePasswordErrors[keyof PatchUsersMePasswordErrors];

export type PatchUsersMePasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type PatchUsersMePasswordResponse = PatchUsersMePasswordResponses[keyof PatchUsersMePasswordResponses];

export type PostUsersSignupData = {
    body: UserCreateRequest;
    path?: never;
    query?: never;
    url: '/users/signup';
};

export type PostUsersSignupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostUsersSignupError = PostUsersSignupErrors[keyof PostUsersSignupErrors];

export type PostUsersSignupResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteUsersUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUsersUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUsersUserIdError = DeleteUsersUserIdErrors[keyof DeleteUsersUserIdErrors];

export type DeleteUsersUserIdResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type DeleteUsersUserIdResponse = DeleteUsersUserIdResponses[keyof DeleteUsersUserIdResponses];

export type GetUsersUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type GetUsersUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersUserIdError = GetUsersUserIdErrors[keyof GetUsersUserIdErrors];

export type GetUsersUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type GetUsersUserIdResponse = GetUsersUserIdResponses[keyof GetUsersUserIdResponses];

export type PatchUsersUserIdData = {
    body: UserUpdateAdmin;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type PatchUsersUserIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUsersUserIdError = PatchUsersUserIdErrors[keyof PatchUsersUserIdErrors];

export type PatchUsersUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type PatchUsersUserIdResponse = PatchUsersUserIdResponses[keyof PatchUsersUserIdResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://192.168.1.180:8000' | (string & {});
};